{"ast":null,"code":"var _jsxFileName = \"/home/nedal/todo-app/src/components/todo/auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { When } from 'react-if';\nimport AuthContext from '../todo/authContext';\nimport settings from './settings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function auth(props) {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const isLoggedIn = auth.loggedIn;\n  const canDo = props.capability ? settings.can(props.capability) : true;\n  const render = isLoggedIn && canDo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(When, {\n      condition: render,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n_s(auth, \"2E+KaGHVlJMhtGjyKmHdHkA1EKU=\");","map":{"version":3,"sources":["/home/nedal/todo-app/src/components/todo/auth.js"],"names":["React","useContext","When","AuthContext","settings","auth","props","isLoggedIn","loggedIn","canDo","capability","can","render","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAChC,QAAMD,IAAI,GAAGJ,UAAU,CAACE,WAAD,CAAvB;AACA,QAAMI,UAAU,GAAGF,IAAI,CAACG,QAAxB;AACA,QAAMC,KAAK,GAAGH,KAAK,CAACI,UAAN,GAAmBN,QAAQ,CAACO,GAAT,CAAaL,KAAK,CAACI,UAAnB,CAAnB,GAAkD,IAAhE;AACA,QAAME,MAAM,GAAGL,UAAU,IAAIE,KAA7B;AAEA,sBACI;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEG,MAAjB;AAAA,gBACKN,KAAK,CAACO;AADX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAbuBR,I","sourcesContent":["import React,{useContext} from 'react';\nimport { When } from 'react-if';\nimport AuthContext from '../todo/authContext'\nimport settings from './settings';\n\nexport default function auth(props) {\n    const auth = useContext(AuthContext)\n    const isLoggedIn = auth.loggedIn\n    const canDo = props.capability ? settings.can(props.capability):true\n    const render = isLoggedIn && canDo\n\n    return (\n        <div>\n            <When condition={render}>\n                {props.children}\n            </When>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}