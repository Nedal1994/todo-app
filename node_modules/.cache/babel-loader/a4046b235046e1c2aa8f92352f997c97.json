{"ast":null,"code":"var _jsxFileName = \"/home/nedal/todo-app/src/components/todo/context/loginContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport superagent from \"superagent\";\nimport base64 from \"base-64\";\nimport cookie from \"react-cookies\";\nimport jwt from \"jsonwebtoken\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoginContext = /*#__PURE__*/React.createContext();\nconst API = \"https://lap8.herokuapp.com/\";\nexport default function LoginProvider(props) {\n  _s();\n\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState({});\n\n  const login = async (username, password) => {\n    try {\n      const response = await superagent.post(`${API}/signin`).set(\"authorization\", `Basic ${base64.encode(`${username}:${password}`)}`);\n      console.log(response.body);\n      validateMyToken(response.body.token);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const signUp = async (username, password, role) => {\n    try {\n      let obj = {\n        username: username,\n        password: password,\n        role: role\n      };\n      const response = await superagent.post(`${API}/signup`, obj);\n      console.log(response.body);\n      validateMyToken(response.body.token);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const myTokenCookie = cookie.load(\"token\");\n    console.log(\"myTokenCookie: \", myTokenCookie);\n    console.log(\"initial render here !!\");\n    validateMyToken(myTokenCookie);\n  }, []);\n\n  function validateMyToken(token) {\n    if (token) {\n      const user = jwt.decode(token);\n      setLoginState(true, user);\n      cookie.save(\"token\", token);\n    } else {\n      setLoginState(false, {});\n    }\n  }\n\n  const setLoginState = (isLoggedIn, user) => {\n    setLoggedIn(isLoggedIn);\n    setUser(user);\n  };\n\n  const logout = () => {\n    setLoggedIn(false);\n    setUser({});\n    cookie.remove(\"token\");\n  };\n\n  const state = {\n    loggedIn: loggedIn,\n    login: login,\n    logout: logout,\n    user: user,\n    signUp: signUp\n  };\n  return /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n    value: state,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginProvider, \"JB/pf5g6FR7GC7BTVtQygg9esT8=\");\n\n_c = LoginProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginProvider\");","map":{"version":3,"sources":["/home/nedal/todo-app/src/components/todo/context/loginContext.js"],"names":["React","useState","useEffect","superagent","base64","cookie","jwt","LoginContext","createContext","API","LoginProvider","props","loggedIn","setLoggedIn","user","setUser","login","username","password","response","post","set","encode","console","log","body","validateMyToken","token","err","signUp","role","obj","myTokenCookie","load","decode","setLoginState","save","isLoggedIn","logout","remove","state","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport superagent from \"superagent\";\nimport base64 from \"base-64\";\nimport cookie from \"react-cookies\";\nimport jwt from \"jsonwebtoken\";\n\nexport const LoginContext = React.createContext();\nconst API = \"https://lap8.herokuapp.com/\";\nexport default function LoginProvider(props) {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState({});\n\n  const login = async (username, password) => {\n    try {\n      const response = await superagent\n        .post(`${API}/signin`)\n        .set(\n          \"authorization\",\n          `Basic ${base64.encode(`${username}:${password}`)}`\n        );\n      console.log(response.body);\n      validateMyToken(response.body.token);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const signUp = async (username, password, role) => {\n    try {\n      let obj = {\n        username: username,\n        password: password,\n        role: role,\n      };\n      const response = await superagent.post(`${API}/signup`, obj);\n      console.log(response.body);\n      validateMyToken(response.body.token);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const myTokenCookie = cookie.load(\"token\");\n    console.log(\"myTokenCookie: \", myTokenCookie);\n    console.log(\"initial render here !!\");\n    validateMyToken(myTokenCookie);\n  }, []);\n\n  function validateMyToken(token) {\n    if (token) {\n      const user = jwt.decode(token);\n\n      setLoginState(true, user);\n      cookie.save(\"token\", token);\n    } else {\n      setLoginState(false, {});\n    }\n  }\n\n  const setLoginState = (isLoggedIn, user) => {\n    setLoggedIn(isLoggedIn);\n    setUser(user);\n  };\n\n  const logout = () => {\n    setLoggedIn(false);\n    setUser({});\n    cookie.remove(\"token\");\n  };\n\n  const state = {\n    loggedIn: loggedIn,\n    login: login,\n    logout: logout,\n    user: user,\n    signUp: signUp,\n  };\n\n  return (\n    <LoginContext.Provider value={state}>\n      {props.children}\n    </LoginContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}