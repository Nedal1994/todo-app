{"ast":null,"code":"var _jsxFileName = \"/home/nedal/todo-app/src/components/todo/loginContext.js\";\nimport React from 'react';\nimport cookie from 'react-cookies';\nimport jwt from 'jsonwebtoken';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testUsers = {\n  admin: {\n    password: 'password',\n    name: 'Administrator',\n    role: 'admin',\n    capabilities: ['create', 'read', 'update', 'delete']\n  },\n  editor: {\n    password: 'password',\n    name: 'Editor',\n    role: 'editor',\n    capabilities: ['read', 'update']\n  },\n  writer: {\n    password: 'password',\n    name: 'Writer',\n    role: 'writer',\n    capabilities: ['create']\n  }\n};\nexport const LoginContext = /*#__PURE__*/React.createContext();\n\nclass LoginProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.can = capability => {\n      var _this$state, _this$state$user, _this$state$user$capa;\n\n      return this === null || this === void 0 ? void 0 : (_this$state = this.state) === null || _this$state === void 0 ? void 0 : (_this$state$user = _this$state.user) === null || _this$state$user === void 0 ? void 0 : (_this$state$user$capa = _this$state$user.capabilities) === null || _this$state$user$capa === void 0 ? void 0 : _this$state$user$capa.includes(capability);\n    };\n\n    this.login = (username, password) => {\n      if (testUsers[username]) {\n        // Create a \"good\" token, like you'd get from a server\n        const token = jwt.sign(testUsers[username], process.env.REACT_APP_SECRET);\n        this.validateToken(token);\n      }\n    };\n\n    this.logout = () => {\n      this.setLoginState(false, null, {});\n    };\n\n    this.validateToken = token => {\n      try {\n        let user = jwt.verify(token, process.env.REACT_APP_SECRET);\n        this.setLoginState(true, token, user);\n      } catch (e) {\n        this.setLoginState(false, null, {});\n        console.log('Token Validation Error', e);\n      }\n    };\n\n    this.setLoginState = (loggedIn, token, user) => {\n      cookie.save('auth', token);\n      this.setState({\n        token,\n        loggedIn,\n        user\n      });\n    };\n\n    this.state = {\n      loggedIn: false,\n      can: this.can,\n      login: this.login,\n      logout: this.logout,\n      user: {\n        capabilities: []\n      }\n    };\n  }\n\n  componentDidMount() {\n    const qs = new URLSearchParams(window.location.search);\n    const cookieToken = cookie.load('auth');\n    const token = qs.get('token') || cookieToken || null;\n    this.validateToken(token);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default LoginProvider;","map":{"version":3,"sources":["/home/nedal/todo-app/src/components/todo/loginContext.js"],"names":["React","cookie","jwt","testUsers","admin","password","name","role","capabilities","editor","writer","LoginContext","createContext","LoginProvider","Component","constructor","props","can","capability","state","user","includes","login","username","token","sign","process","env","REACT_APP_SECRET","validateToken","logout","setLoginState","verify","e","console","log","loggedIn","save","setState","componentDidMount","qs","URLSearchParams","window","location","search","cookieToken","load","get","render","children"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport cookie from 'react-cookies';\nimport jwt from 'jsonwebtoken';\n\nconst testUsers = {\n  admin: {password:'password', name:'Administrator', role:'admin', capabilities:['create','read','update','delete']},\n  editor: { password: 'password', name: 'Editor', role: 'editor', capabilities: ['read', 'update']},\n  writer: { password: 'password', name: 'Writer', role: 'writer', capabilities: ['create']},\n};\n\nexport const LoginContext = React.createContext();\n\nclass LoginProvider extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      can: this.can,\n      login: this.login,\n      logout: this.logout,\n      user: {capabilities:[]},\n    };\n  }\n\n  can = (capability) => {\n    return this?.state?.user?.capabilities?.includes(capability);\n  }\n\n  login = (username, password) => {\n    if (testUsers[username]) {\n      // Create a \"good\" token, like you'd get from a server\n      const token = jwt.sign(testUsers[username], process.env.REACT_APP_SECRET);\n      this.validateToken(token);\n    }\n  }\n\n  logout = () => {\n    this.setLoginState(false, null, {});\n  };\n\n  validateToken = token => {\n    try {\n      let user = jwt.verify(token, process.env.REACT_APP_SECRET);\n      this.setLoginState(true, token, user);\n    }\n    catch (e) {\n      this.setLoginState(false, null, {});\n      console.log('Token Validation Error', e);\n    }\n\n  };\n\n  setLoginState = (loggedIn, token, user) => {\n    cookie.save('auth', token);\n    this.setState({ token, loggedIn, user });\n  };\n\n  componentDidMount() {\n    const qs = new URLSearchParams(window.location.search);\n    const cookieToken = cookie.load('auth');\n    const token = qs.get('token') || cookieToken || null;\n    this.validateToken(token);\n  }\n\n  render() {\n    return (\n      <LoginContext.Provider value={this.state}>\n        {this.props.children}\n      </LoginContext.Provider>\n    );\n  }\n}\n\nexport default LoginProvider;"]},"metadata":{},"sourceType":"module"}