{"ast":null,"code":"var _jsxFileName = \"/home/nedal/todo-app/src/components/todo/list.js\";\nimport { React } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function list() {\n  var _s = $RefreshSig$();\n\n  function Items(_ref) {\n    let {\n      currentItems\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Item #\", item]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this))\n    }, void 0, false);\n  }\n\n  function PaginatedItems(_ref2) {\n    _s();\n\n    let {\n      itemsPerPage\n    } = _ref2;\n    // We start with an empty list of items.\n    const [currentItems, setCurrentItems] = useState(null);\n    const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n\n    const [itemOffset, setItemOffset] = useState(0);\n    useEffect(() => {\n      // Fetch items from another resources.\n      const endOffset = itemOffset + itemsPerPage;\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n    const handlePageClick = event => {\n      const newOffset = event.selected * itemsPerPage % items.length;\n      console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n      setItemOffset(newOffset);\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Items, {\n        currentItems: currentItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n        breakLabel: \"...\",\n        nextLabel: \"next >\",\n        onPageChange: handlePageClick,\n        pageRangeDisplayed: 5,\n        pageCount: pageCount,\n        previousLabel: \"< previous\",\n        renderOnZeroPageCount: null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  _s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n}","map":{"version":3,"sources":["/home/nedal/todo-app/src/components/todo/list.js"],"names":["React","list","Items","currentItems","map","item","PaginatedItems","itemsPerPage","setCurrentItems","useState","pageCount","setPageCount","itemOffset","setItemOffset","useEffect","endOffset","console","log","items","slice","Math","ceil","length","handlePageClick","event","newOffset","selected"],"mappings":";AAAA,SAAQA,KAAR,QAAoB,OAApB;;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,WAASC,KAAT,OAAiC;AAAA,QAAlB;AAAEC,MAAAA;AAAF,KAAkB;AAC7B,wBACE;AAAA,gBACGA,YAAY,IACXA,YAAY,CAACC,GAAb,CAAkBC,IAAD,iBACf;AAAA,+BACE;AAAA,+BAAWA,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ,qBADF;AAUD;;AAED,WAASC,cAAT,QAA0C;AAAA;;AAAA,QAAlB;AAAEC,MAAAA;AAAF,KAAkB;AACxC;AACA,UAAM,CAACJ,YAAD,EAAeK,eAAf,IAAkCC,QAAQ,CAAC,IAAD,CAAhD;AACA,UAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BF,QAAQ,CAAC,CAAD,CAA1C,CAHwC,CAIxC;AACA;;AACA,UAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,CAAD,CAA5C;AAEAK,IAAAA,SAAS,CAAC,MAAM;AACd;AACA,YAAMC,SAAS,GAAGH,UAAU,GAAGL,YAA/B;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBL,UAAW,OAAMG,SAAU,EAA7D;AACAP,MAAAA,eAAe,CAACU,KAAK,CAACC,KAAN,CAAYP,UAAZ,EAAwBG,SAAxB,CAAD,CAAf;AACAJ,MAAAA,YAAY,CAACS,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,MAAN,GAAef,YAAzB,CAAD,CAAZ;AACD,KANQ,EAMN,CAACK,UAAD,EAAaL,YAAb,CANM,CAAT,CARwC,CAgBxC;;AACA,UAAMgB,eAAe,GAAIC,KAAD,IAAW;AACjC,YAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBnB,YAAlB,GAAkCW,KAAK,CAACI,MAA1D;AACAN,MAAAA,OAAO,CAACC,GAAR,CACG,8BAA6BO,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;AAGAZ,MAAAA,aAAa,CAACY,SAAD,CAAb;AACD,KAND;;AAQA,wBACE;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,YAAY,EAAEtB;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AACE,QAAA,UAAU,EAAC,KADb;AAEE,QAAA,SAAS,EAAC,QAFZ;AAGE,QAAA,YAAY,EAAEoB,eAHhB;AAIE,QAAA,kBAAkB,EAAE,CAJtB;AAKE,QAAA,SAAS,EAAEb,SALb;AAME,QAAA,aAAa,EAAC,YANhB;AAOE,QAAA,qBAAqB,EAAE;AAPzB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBADF;AAeP;;AAtD8B,KAchBJ,cAdgB;AAuD9B","sourcesContent":["import {React} from 'react'\n\nexport default function list() {\n    function Items({ currentItems }) {\n        return (\n          <>\n            {currentItems &&\n              currentItems.map((item) => (\n                <div>\n                  <h3>Item #{item}</h3>\n                </div>\n              ))}\n          </>\n        );\n      }\n      \n      function PaginatedItems({ itemsPerPage }) {\n        // We start with an empty list of items.\n        const [currentItems, setCurrentItems] = useState(null);\n        const [pageCount, setPageCount] = useState(0);\n        // Here we use item offsets; we could also use page offsets\n        // following the API or data you're working with.\n        const [itemOffset, setItemOffset] = useState(0);\n      \n        useEffect(() => {\n          // Fetch items from another resources.\n          const endOffset = itemOffset + itemsPerPage;\n          console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n          setCurrentItems(items.slice(itemOffset, endOffset));\n          setPageCount(Math.ceil(items.length / itemsPerPage));\n        }, [itemOffset, itemsPerPage]);\n      \n        // Invoke when user click to request another page.\n        const handlePageClick = (event) => {\n          const newOffset = (event.selected * itemsPerPage) % items.length;\n          console.log(\n            `User requested page number ${event.selected}, which is offset ${newOffset}`\n          );\n          setItemOffset(newOffset);\n        };\n      \n        return (\n          <>\n            <Items currentItems={currentItems} />\n            <ReactPaginate\n              breakLabel=\"...\"\n              nextLabel=\"next >\"\n              onPageChange={handlePageClick}\n              pageRangeDisplayed={5}\n              pageCount={pageCount}\n              previousLabel=\"< previous\"\n              renderOnZeroPageCount={null}\n            />\n          </>\n          )\n\n}\n}"]},"metadata":{},"sourceType":"module"}